@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.RazorPages;
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.AspNetCore.Mvc.ViewFeatures;
@using System.Net.Http.Headers;
@*@model List<WorkflowEngineMVC.ViewModels.StateViewModel>*@
@{
    ViewBag.Title = "CPRO";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model WorkFlowResponseModel
<link href="https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css" rel="stylesheet">  
<script src="https://code.jquery.com/jquery-1.10.2.js"></script>  
<script src="https://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>  
<div id="wfgrid" style="min-height:600px; max-width: 1200px;">
    <table class="tableborder">
         <tr>
            <td style="color:blue; background-color:blue; color:white;">          
                From
            </td>
            <td style="color:blue; background-color:blue; color:white;">
                To
            </td>
            <td style="color:blue; background-color:blue; color:white;">
                Action
            </td>
        </tr>          
        <tr>
            <td>
                @{
                    ViewData["ActivityName"] = Model.Processdefinition.InitialActivity.Name;
                 }
                    @Model.Processdefinition.InitialActivity.Name
            </td>
            <td>                                
                @foreach(var data in Model.Processdefinition.Transitions.Where(d => d.From.Name == @Model.Processdefinition.InitialActivity.Name))
                {
                    ViewData["NextActivityName"] = data.To.Name;
                    ViewData["FinalActivity"] = false;                
                    @data.To.Name                    
                }                
            </td>
            @if(Model.CurrentActivityName == ViewData["ActivityName"]?.ToString())
            {            
                    <td style="background-color:blue;color:white">                      
                    @foreach (var command in Model.ListCommandModel)
                    {                                              
                     <a class="nav-link text-dark" asp-area="" asp-controller="CPROChain" asp-action="ProcessCommand" asp-route-processId=@command.ProcessId asp-route-commandName=@command.CommandName>@command.CommandName</a>                                                                            
                    }    
                </td>
            }
        </tr> 
        @while((bool?)ViewData["FinalActivity"] != true)
        {
            @foreach(var data in Model.Processdefinition.Transitions.Where(d => d.From.Name == @ViewData["NextActivityName"]?.ToString()))
            {
                ViewData["NextActivityName"] = data.To.Name;
                ViewData["FinalActivity"] = data.To.IsFinal;
                ViewData["ActivityName"] = data.From.Name;
                <tr>
                    <td>
                        @data.From.Name
                    </td>
                    <td>
                        @data.To.Name
                    </td>
                    @if(Model.CurrentActivityName == ViewData["ActivityName"]?.ToString())
                    {            
                        <td style="background-color:blue;color:white">                         
                            @foreach (var command in Model.ListCommandModel)
                            {                                    
                             <a class="nav-link text-dark" asp-area="" asp-controller="CPROChain" asp-action="ProcessCommand" asp-route-processId=@command.ProcessId asp-route-commandName=@command.CommandName>@command.CommandName</a>                                                                                          
                            }                               
                        </td>
                    }
                </tr>        
            }
        }
    </table>
    <br/>    
    @if (@Model.GTSTScheduler_Model != null)
    {
        <br />
        <div>  
            @Html.PartialAsync("GTSTScheduler",Model).Result  
        </div>
    }
</div>